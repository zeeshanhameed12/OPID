import pm4py
import json
import uuid
import re
from pm4py.algo.discovery.ocel.ocpn.variants import classic as ocpn_discovery
from pm4py.objects.petri_net.obj import PetriNet
from package import Place, Transition, Arc, OPID, get_common_transitions, get_transition_name

# Load OCEL log
filename = "selfocel.xml"
ocel = pm4py.read_ocel2_xml(filename)
print(f"The object types in the OCEL are: {pm4py.ocel.ocel_get_object_types(ocel)}")
input_str = input("Enter object type pairs in the format (Obj1,Obj2),...: ")

# Parse the input string into a list of tuples
object_type_pairs = re.findall(r'\(([^,]+),([^)]+)\)', input_str)
object_type_pairs = [(a.strip(), b.strip()) for a, b in object_type_pairs]

print("Parsed pairs:", object_type_pairs)

# Outside your loop, initialize results list
results = []
# Split the input by comma and strip whitespace and store in a list
for object_type_pair in object_type_pairs:
    if len(object_type_pair) != 2:
        print(f"Invalid pair: {object_type_pair}. Expected format is (objectType1, objectType2).")
        exit(1)
    # Filter OCEL by object types
    filtered_ocel = pm4py.filtering.filter_ocel_object_types(ocel, object_type_pair)
    ocpn = ocpn_discovery.apply(filtered_ocel)
    # Initialize new OPID instance each iteration
    opid = OPID(f"Self OCPN Export for pair {object_type_pair}")
    # Add transitions from discovered OCPN
    for act in ocpn["activities"]:
        opid.add_transition(Transition(name=act, label=act, silent=False))
    # Places and Arcs
    for ot, (net, initial_marking, final_marking) in ocpn["petri_nets"].items():
        for place in net.places:
            place_name = f"place_{opid.unique_place_id}"
            opid.place_name_map[place] = place_name
            opid.unique_place_id += 1
            opid.add_place(Place(
                name=opid.place_name_map[place],
                objectType=ot,
                initial=place in initial_marking,
                final=place in final_marking
            ))
        for arc in net.arcs:
            if arc.source in opid.place_name_map:
                    source_name = opid.place_name_map[arc.source]
                    target_name = get_transition_name(arc.target, opid) 
            else:
                    source_name = get_transition_name(arc.source, opid)
                    target_name = opid.place_name_map[arc.target]
            if type(arc.source) is PetriNet.Place:
                    is_double = (
                        arc.target.label in ocpn["double_arcs_on_activity"][ot]
                        and ocpn["double_arcs_on_activity"][ot][arc.target.label]
                    )
                    penwidth = "4.0" if is_double else "1.0"
            elif type(arc.source) is PetriNet.Transition:
                    is_double = (
                        arc.source.label in ocpn["double_arcs_on_activity"][ot]
                        and ocpn["double_arcs_on_activity"][ot][arc.source.label]
                    )
                    penwidth = "4.0" if is_double else "1.0"
            opid.add_arc(Arc(
                source=source_name,
                target=target_name,
                weight=penwidth,
                variable=is_double,
                inscription=ot[0].capitalize() if is_double else ot[0],
            ))
        for place in final_marking:
            silent_name = f"tau_end_{ot}_{uuid.uuid4()}"
            opid.add_transition(Transition(name=silent_name, label="", silent=True))
            opid.last_silent_transition[ot] = silent_name
            opid.add_arc(Arc(
                source=opid.place_name_map[place],
                target=silent_name,
                inscription=ot[0]
            ))
    # Implement T_R: stable relationships
    #object_types
    stable_relations = object_type_pair
    common = get_common_transitions(ocpn, stable_relations[0], stable_relations[1], by_label=True)
    # get the common relations in stable_relations object types
    transition_create_link = Transition(f"create_link_{stable_relations[0]}_{stable_relations[1]}", label="", silent=True)
    opid.add_transition(transition_create_link)
    for rel in stable_relations:
        pb = Place(f"P_b{rel}", objectType=f"{rel}")
        opid.add_place(pb)
        pa = Place(f"P_a{rel}", objectType=f"{rel}")
        opid.add_place(pa)
        silent_name = f"tau_start_{rel}_{uuid.uuid4()}"
        opid.add_transition(Transition(name=silent_name, label="", silent=True))
        silent_name2 = f"tau_start_{rel}_{uuid.uuid4()}"
        opid.add_transition(Transition(name=silent_name2, label="", silent=True))
        net, initial_marking, final_marking = ocpn["petri_nets"][rel]
        for arc in net.arcs:
            if type(arc.source) is PetriNet.Place:
                    is_double = (
                        arc.target.label in ocpn["double_arcs_on_activity"][ot]
                        and ocpn["double_arcs_on_activity"][ot][arc.target.label]
                    )
                    penwidth = "4.0" if is_double else "1.0"
            elif type(arc.source) is PetriNet.Transition:
                    is_double = (
                        arc.source.label in ocpn["double_arcs_on_activity"][ot]
                        and ocpn["double_arcs_on_activity"][ot][arc.source.label]
                    )
                    penwidth = "4.0" if is_double else "1.0"
        opid.add_arc(Arc(
                source=silent_name,
                target=pb.name,
                inscription=f"v_{rel}"
            ))
        opid.add_arc(Arc(
                source=pb.name,
                weight=penwidth,
                variable=is_double,
                target=transition_create_link.name,
                inscription= rel[0].capitalize() if is_double else rel[0],
            ))
        opid.add_arc(Arc(
                source=transition_create_link.name,
                target=pa.name,
                weight=penwidth,
                variable=is_double,
                inscription=rel[0].capitalize() if is_double else rel[0]
            ))
        opid.add_arc(Arc(
                source=pa.name,
                target=silent_name2,
                weight="1.0",
                variable=False,
                inscription=rel[0]
            ))
        
        for place in initial_marking:
                    opid.add_arc(Arc(
                        source=silent_name2,
                        target=opid.place_name_map[place],
                        inscription=rel[0]
                    ))
# print(f"common transitions for {stable_relations[0]} and {stable_relations[1]}: {common}")
    pL1 = Place(f"{object_type_pair}", objectType=f"{object_type_pair}")
    opid.add_place(pL1)
    opid.add_arc(Arc(
            source=transition_create_link.name,
            target=pL1.name,
            weight="4.0",
            variable=True,
            inscription=f"{object_type_pair[0][0].capitalize()}_{object_type_pair[1][0].capitalize()}",
        ))
    opid.add_arc(Arc(
                source=pL1.name,
                target=opid.last_silent_transition[stable_relations[0]],
                weight="1.0",
                variable=False,
                inscription=""
                
            ))

    # create arcs from all common transitions to pL1
    for transition in common:
        opid.add_arc(Arc(
                source=pL1.name,
                target=str(transition),
                weight="4.0",
                variable=True,
                inscription=f"{object_type_pair[0][0].capitalize()}_{object_type_pair[1][0].capitalize()}",
                bidirectional=True
                #inscription=f"{rel[0][0]}_{rel[1][0]}"
                #inscription=rel[0].capitalize() if is_double else rel[0]
            ))
        """opid.add_arc(Arc(
                source=str(transition),
                target=pL1.name,
                weight="4.0",
                variable=True,
                inscription="links"
                #inscription=f"{rel[0][0]}_{rel[1][0]}"
                #inscription=rel[0].capitalize() if is_double else rel[0]
            ))"""
    # append opid to results at same level in json structure for collective output as json
    results.append({
        "object_type_pair": object_type_pair,
        "data": opid.to_json()
    })
# Output to JSON
# After the loop finishes, write all results to JSON
output_path = "opid_view.json"
with open(output_path, 'w') as json_file:
    json.dump(results, json_file, indent=4)